#+title: Classes

* Player
** Attributes
- resources: Resources
- development_cards: List<DevCard>
- road_length: int
- knights_played: int
- victory_points: int
- available_settlements: [Settlement]
- built_settlement: [Settlement]
- available_roads: [Road]
- built_roads: [Road]
- available_cities: [City]
- built_cities: [City]
- exchange_rate: Dict<Dict<int>>

** Methods
- view_possible_actions() -> List<Action>
- build_settlement(location: int)
- upgrade_settlement(location: int)
- build_road(location: int)
- trade(to: Player | Bank, offering: Resources, recieving: Resources)
- play_knight(location: int)
- play_monopoly()
- play_year_of_plenty()
- play_road_building()
- end_turn()


* Game

* Board

** Attributes
- size: int
- ^cell_count: int
- ^cardinal_directions: list[int]
- ^cells: list[None|Tile|Intersection|Path]
- ^harbors: list[int]
- ^bridges: list[int]
- ^tiles: list[int]
- ^intersections: list[int]
- ^paths: list[int]
- ^desert_tiles: list[int]
- ^resrouce_number: int

** Methods
- constructor(size: int, initial_data: serialized) -> void
- select(location: int, distance: int, dir_pattern: Tuple(int), matching: function, return_cells: bool) -> list[int]
- has_path(location: int) -> bool
- has_intersection(location: int) -> bool
- add_road(location: int, road: Road) -> bool
- add_settlement(location: int, settlement: Settlement, allow_disconnected_settlement: bool)
- save_state() -> serialized

* GameMaster
event driven
** Attributes
- is_setup_phase
** Methods
- check_longest_road -> Player
- check_largest_army -> Player
- distribute_resources(roll: int) -> void
- handle_trade(trade: Trade)
- select_player() -> Player
- generate_possible_action_for_player(player: Player) -> List<Action>
- in_progress() -> bool


* Trade
** Methods
- new(from: Player, to: Union[Player, Bank], resources_required: Resources, resources_offered: Resources)

* Resources
make sure to overload operators for this for easier operations
- ore: int
- grain: int
- lumber: int
- wool: int
- brick: int

* Bank

